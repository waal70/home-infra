---
# title: role-samba-ad-dc
#
# Author: AndrÃ©
# Version: 1.0
# File: tasks/sysvol-sync.yml
#
# Pre-requisites: at least a primary and one additional DC.
# Description: Sets up sysvol sync between the DC's
- name: Ensure rsync is installed. Needed for posix.synchronize and the sysvol replication
  ansible.builtin.apt:
    name: rsync
    state: present

- name: Backup the idmap database file
  ansible.builtin.command: tdbbackup -s .bak /var/lib/samba/private/idmap.ldb
  args:
    creates: /var/lib/samba/private/idmap.ldb.bak
  when: smb_role == "primary"

# Note: because rsync is not daemonized (yet), we cannot use ansible.posix.synchronize
# So we have to revert to fetch and copy...

- name: Fetch the idmap database file
  ansible.builtin.fetch:
    src: /var/lib/samba/private/idmap.ldb.bak
    dest: var/lib/samba/private/idmap.ldb
    flat: true
  when: smb_role == "primary"

- name: Copy the idmap database file
  ansible.builtin.copy:
    src: var/lib/samba/private/idmap.ldb
    dest: /var/lib/samba/private/idmap.ldb
    owner: root
    group: root
    mode: "0600"
  when: smb_role == "additional"

- name: Now put in place the config for rsyncd
  ansible.builtin.template:
    src: etc/rsyncd.conf.j2
    dest: /etc/rsyncd.conf
    mode: "0644"
  when: smb_role == "primary"

- name: Create the secrets file and give proper permissions
  ansible.builtin.template:
    src: var/lib/samba/private/rsyncd.secret.j2
    dest: /var/lib/samba/private/rsyncd.secret
    owner: root
    group: root
    mode: "0600"
  when: smb_role == "primary"

- name: Enable rsync services for {{ ansible_hostname }}
  ansible.builtin.systemd_service:
    enabled: true
    masked: false
    state: restarted
    name: rsync.service
  when: smb_role == "primary"

- name: Create the password file on additional {{ ansible_hostname }}
  ansible.builtin.copy:
    content: "{{ smb_rsyncd_pass }}"
    dest: /var/lib/samba/rsync-sysvol.secret
    owner: root
    group: root
    mode: "0600"
    force: true
  when: smb_role == "additional"

- name: Dry run the rsync # noqa: command-instead-of-module
  ansible.builtin.command: >
    rsync --dry-run -XAavz --delete-after
     --password-file=/var/lib/samba/rsync-sysvol.secret
      rsync://sysvol-replication@{{ hostvars[groups['samba_primary'][0]]['ansible_default_ipv4']['address'] }}/SysVol/
       /var/lib/samba/sysvol/
  register: rsync_dryrun
  when: smb_role == "additional"
  changed_when: false

- name: Debug the dryrun
  ansible.builtin.debug:
    var: rsync_dryrun
  when: smb_role == "additional"

- name: Perform the rsync if dryrun was succesfull # noqa: command-instead-of-module
  ansible.builtin.command: >
    rsync -XAavz --delete-after
     --password-file=/var/lib/samba/rsync-sysvol.secret
      rsync://sysvol-replication@{{ hostvars[groups['samba_primary'][0]]['ansible_default_ipv4']['address'] }}/SysVol/
       /var/lib/samba/sysvol/
  when:
    - smb_role == "additional"
    - not rsync_dryrun.failed
  changed_when: true

- name: Set the rsync as a cron-job on the additional servers. Run at 5:30 AM and 17:30
  ansible.builtin.cron:
    name: SysVol sync
    minute: "30"
    hour: 5,17
    job: rsync -XAavz --delete-after --password-file=/var/lib/samba/rsync-sysvol.secret rsync://sysvol-replication@{{ hostvars[groups['samba_primary'][0]]['ansible_default_ipv4']['address'] }}/SysVol/ /var/lib/samba/sysvol/ # noqa: yaml[line-length]
  when:
    - smb_role == "additional"
    - not rsync_dryrun.failed

- name: Reset the ACL on the additional servers.
  ansible.builtin.command: samba-tool ntacl sysvolreset
  when: smb_role == "additional"
  changed_when: true

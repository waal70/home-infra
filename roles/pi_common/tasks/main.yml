---
# tasks file for pi-common
## Start by expanding the filesystem (when possible)
- name: Check whether FS is expandable
  ansible.builtin.command: raspi-config nonint get_can_expand
  register: fs_filled
  changed_when: false

- name: Find FS expandable flag file
  ansible.builtin.stat:
    path: "{{ fs_expand_file }}"
  register: fs_expanded

- name: Print if FS is expandable or not
  ansible.builtin.debug:
    msg: Filesystem is expandable! [{{ fs_filled.stdout }}]
  when: fs_filled.stdout == '0'

- name: Expand Filesystem, if not done before
  ansible.builtin.command: raspi-config nonint do_expand_rootfs
  when: (fs_filled.stdout == '0') and not fs_expanded.stat.exists
  notify: Restart Raspberry
  changed_when: not fs_expanded.stat.exists

- name: Ensure expand_fs flag file exists, if not already there
  ansible.builtin.copy:
    content: "{{ ansible_date_time.iso8601_micro }} -> timestamp of filesystem expansion"
    dest: "{{ fs_expand_file }}"
    force: false
    group: sys
    owner: root
    mode: "0644"
  when: not fs_expanded.stat.exists


# N3 Disable predictable network interface names
- name: Get predictable network names status
  ansible.builtin.command: raspi-config nonint get_net_names
  register: pi_netnames
  changed_when: false

- name: Print current predictable network names status (0=enabled, 1=disabled)
  ansible.builtin.debug:
    msg: "Current network names status: {{ pi_netnames.stdout }}"

- name: Set predictable network names
  ansible.builtin.command: raspi-config nonint do_net_names {{ disable_netnames }}
  when: pi_netnames.stdout != disable_netnames
  notify: Restart Raspberry
  changed_when: true

# P2 SSH
- name: Check if SSH is disabled (1) or not (0)
  ansible.builtin.command: raspi-config nonint get_ssh
  register: ssh_status
  changed_when: false

- name: Print SSH status
  ansible.builtin.debug:
    msg: "SSH status is: {{ ssh_status.stdout }}"

- name: Set SSH
  ansible.builtin.command: raspi-config nonint do_ssh {{ disable_ssh }}
  when: ssh_status.stdout != disable_ssh
  notify: Restart Raspberry
  changed_when: true

# P3 VNC
- name: Get VNC status
  ansible.builtin.command: raspi-config nonint get_vnc
  register: vnc_status
  changed_when: false

- name: Print VNC status
  ansible.builtin.debug:
    msg: "VNC statusmainommand: raspi-config nonint do_vnc {{ disable_vnc }}"
  when: vnc_status.stdout != disable_vnc
  notify: Restart Raspberry
  changed_when: true

# P4 SPI
- name: Get SPI status
  ansible.builtin.command: raspi-config nonint get_spi
  register: spi_status
  changed_when: false

- name: Print SPI status
  ansible.builtin.debug:
    msg: "SPI status is: {{ spi_status.stdout }}"

- name: Set SPI
  ansible.builtin.command: raspi-config nonint do_spi {{ disable_spi }}
  when: (spi_status.stdout != disable_spi) and ('pican2' not in group_names)
  notify: Restart Raspberry
  changed_when: true

- name: Enable SPI for PiCAN2-raspberries
  ansible.builtin.command: raspi-config nonint do_spi 0
  when: ('pican2' in group_names) and (spi_status.stdout != "0")
  notify: Restart Raspberry
  changed_when: ('pican2' in group_names) and (spi_status.stdout != "0")

# P5 I2C
- name: Get I2C status
  ansible.builtin.command: raspi-config nonint get_i2c
  register: i2c_status
  changed_when: false

- name: Print I2C status
  ansible.builtin.debug:
    msg: "I2C status is: {{ i2c_status.stdout }}"

- name: Set I2C
  ansible.builtin.command: raspi-config nonint do_i2c {{ disable_i2c }}
  when: i2c_status.stdout != disable_i2c
  notify: Restart Raspberry
  changed_when: true

# P7 1-Wire
- name: Get Onewire status
  ansible.builtin.command: raspi-config nonint get_onewire
  register: onewire_status
  changed_when: false

- name: Print Onewire status
  ansible.builtin.debug:
    msg: "Onewire status is: {{ onewire_status.stdout }}"

- name: Set OneWire
  ansible.builtin.command: raspi-config nonint do_onewire {{ disable_1wire }}
  when: onewire_status.stdout != disable_1wire
  notify: Restart Raspberry
  changed_when: true

# P8 Remote GPIO
- name: Get rGPIO status
  ansible.builtin.command: raspi-config nonint get_rgpio
  register: rgpio_status
  changed_when: false

- name: Print rGPIO status
  ansible.builtin.debug:
    msg: "rGPIO status is: {{ rgpio_status.stdout }}"

- name: Set Remote GPIO
  ansible.builtin.command: raspi-config nonint do_rgpio {{ disable_gpio }}
  when: rgpio_status.stdout != disable_gpio
  notify: Restart Raspberry
  changed_when: true

- name: Set has_bootloader depending on cpu-version
  ansible.builtin.set_fact:
    has_bootloader: true
  when: "'Raspberry Pi 5' in ansible_local['cpu_info']['processor_name'] or 'Raspberry Pi 4' in ansible_local['cpu_info']['processor_name']"

- name: Get bootloader status for Raspberry Pi 4 and 5
  ansible.builtin.command: rpi-eeprom-update
  register: eeprom_poke
  when: has_bootloader is defined
  changed_when: false

- name: Update bootloader when necessary
  ansible.builtin.command: rpi-eeprom-update -a
  when: "has_bootloader is defined and 'BOOTLOADER: update available' in eeprom_poke.stdout"
  changed_when: true
  notify: Restart Raspberry

- name: Import tasks to edit /boot/config.txt
  ansible.builtin.import_tasks: bootconfig.yml

- name: Import tasks to process overlay for hifiberry-dacplus
  ansible.builtin.import_tasks: overlay_hifiberry.yml
  when: "'hifiberry' in group_names"

- name: Import tasks to process overlay for PiCAN2-raspberries
  ansible.builtin.import_tasks: overlay_pican.yml
  when: "'pican2' in group_names"

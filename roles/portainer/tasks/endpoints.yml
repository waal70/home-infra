---
- name: Get Endpoints
  ansible.builtin.uri:
    url: "{{ portainer_endpoint }}/endpoints"
    method: GET
    return_content: true
    validate_certs: false
    headers:
      Authorization: Bearer {{ (auth_token.content | from_json).jwt }}
  register: portainer_known_endpoints_raw

- name: Save endpoints as fact
  ansible.builtin.set_fact:
    portainer_known_endpoints: "{{ portainer_known_endpoints_raw.json | map(attribute='Name') | list }}"
    portainer_known_endpoint_ids: "{{ portainer_known_endpoints_raw.json | map(attribute='Id') | list }}"
    portainer_remote_endpoint_type: "{{ portainer_known_endpoints_raw.json }}"

- name: "Show known endpoints"
  ansible.builtin.debug:
    msg: "{{ portainer_known_endpoint_ids }}"

- name: "Show type endpoints"
  ansible.builtin.debug:
    msg: "{{ endpoints | type_debug }}"

- name: "Register first endpoint with Portainer"
  ansible.builtin.uri:
    url: "{{ portainer_endpoint }}/endpoints"
    method: POST
    headers:
      Authorization: "Bearer {{ (auth_token.content | from_json).jwt }}"
    body_format: form-multipart
    validate_certs: false
    body:
      Name: "{{ item.name }}"
      PublicURL: "{{ inventory_hostname }}"
      EndpointCreationType: "1"
  register: response
  with_items:
    - "{{ endpoints | first }}"
  when: item.name not in portainer_known_endpoints

- name: "Register endpoint with Portainer in case of remote endpoint {{ stack_name }}"
  ansible.builtin.uri:
    url: "{{ portainer_endpoint }}/endpoints"
    method: POST
    headers:
      Authorization: "Bearer {{ (auth_token.content | from_json).jwt }}"
    body_format: form-multipart
    validate_certs: false
    body:
      Name: "{{ item.name }}"
      URL: "{{ item.url }}"
      EndpointCreationType: "2"
      TLS: "true"
      TLSSkipClientVerify: "true"
      TLSSkipVerify: "true"
  register: response
  with_items:
    - "{{ endpoints | last }}"
  when:
    - item.name not in portainer_known_endpoints
    - endpoints | length > 1

- name: Refresh Endpoints
  ansible.builtin.uri:
    url: "{{ portainer_endpoint }}/endpoints"
    method: GET
    return_content: true
    validate_certs: false
    headers:
      Authorization: Bearer {{ (auth_token.content | from_json).jwt }}
  register: portainer_known_endpoints_raw

- name: Refresh endpoints to facts
  ansible.builtin.set_fact:
    portainer_known_endpoints: "{{ portainer_known_endpoints_raw.json | map(attribute='Name') | list }}"
    portainer_known_endpoint_ids: "{{ portainer_known_endpoints_raw.json | map(attribute='Id') | list }}"
    portainer_remote_endpoint_type: "{{ portainer_known_endpoints_raw.json }}"

- name: Verifying calls
  ansible.builtin.fail:
    msg: "Could not add endpoint: {{ item.item.name }}"
  when: item.stdout is defined and (item.stdout|from_json).err is defined
  with_items:
    - "{{ response.results }}"

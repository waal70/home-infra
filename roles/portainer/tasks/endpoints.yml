---
- name: Get Endpoints
  ansible.builtin.uri:
    url: "{{ portainer_endpoint }}/endpoints"
    method: GET
    return_content: true
    validate_certs: false
    headers:
      Authorization: Bearer {{ (auth_token.content | from_json).jwt }}
  register: portainer_known_endpoints_raw

- name: Save endpoints as fact
  ansible.builtin.set_fact:
    portainer_known_endpoints: "{{ portainer_known_endpoints_raw.json | map(attribute='Name') | list }}"
    portainer_remote_endpoint_type: "{{ portainer_known_endpoints_raw.json }}"

- name: "Show known endpoints"
  ansible.builtin.debug:
    msg: "{{ portainer_known_endpoints }}"

- name: "Ensure curl is present on the system"
  ansible.builtin.apt:
    name:
      - curl
    state: present

- name: "Authenticate with Portainer API for {{ stack_name }}"
  ansible.builtin.uri:
    url: "{{ portainer_endpoint }}/endpoints"
    method: POST
    headers:
      Authorization: "Bearer {{ (auth_token.content | from_json).jwt }}"
    body_format: form-multipart
    validate_certs: false
    body:
      Name: "{{ item.name }}"
      URL: "{{ item.url }}"
      EndpointCreationType: "2"
      TLS: "true"
      TLSSkipClientVerify: "true"
      TLSSkipVerify: "true"
  register: response
  with_items:
    - "{{ endpoints | list }}"
  when: item.name not in portainer_known_endpoints


# - name: "Debug response"
#   ansible.builtin.debug:
#     msg: "Endpoint {{ item.item.name }}, Response: {{ item.stdout | default('{}') | from_json }}"
#   with_items:
#     - "{{ response.results }}"

- name: Verifying calls
  ansible.builtin.fail:
    msg: "Could not add endpoint: {{ item.item.name }}"
  when: item.stdout is defined and (item.stdout|from_json).err is defined
  with_items:
    - "{{ response.results }}"

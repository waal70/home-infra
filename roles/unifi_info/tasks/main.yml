---
# tasks file for unifi_info
# The API is not officially documented. This module is based upon:
# https://ubntwiki.com/products/software/unifi-controller/api

- name: Generate authentication token
  ansible.builtin.uri:
    url: "{{ controller_login }}"
    method: POST
    return_content: true
    body_format: json
    body:
      username: "{{ controller_username }}"
      password: "{{ controller_password }}"
      remember: "true"
    validate_certs: false
  register: auth_token

- name: Get info on active stations (ie. connected client devices, currently holding an IP-address)
  ansible.builtin.uri:
    url: "{{ controller_api }}/s/{{ controller_site }}/stat/sta"
    method: GET
    headers:
      Cookie: "{{ auth_token.cookies_string }}"
    return_content: true
    validate_certs: false
  register: response

- name: Transform the response into a format containing hardware address, ip address, hostname and manufacturer
  ansible.builtin.set_fact:
    livelist: "{{ response.json | default({'data': {}}) | community.general.json_query('data[*].{mac: mac,ansible_host: ip,hostname: hostname, oui: oui}') }}"

- name: Further reduce the transformed list of live clients to only those that have an entry in the inventory
  ansible.builtin.set_fact:
    livelist_known: "{{ (livelist_known | default([])) + [item] }}"
  with_items: "{{ livelist }}"
  when: item.mac in maclist

- name: Create the baselists that we will base further processing on
  ansible.builtin.set_fact:
    # ip will contain a list with only known IP-addresses
    ip: "{{ livelist_known | map(attribute='ansible_host') | list }}"
    # mac will contain a list with only the hardware addresses
    mac: "{{ livelist_known | map(attribute='mac') | list }}"
    # transform the inventory list into a list by group name
    il_groups: "{{ maclist | from_json | items2dict(key_name='mac', value_name='group') }}"
    # transform the inventory list into a list by hostname
    il_names: "{{ maclist | from_json | items2dict(key_name='mac', value_name='name') }}"

- name: Create the singular baselists
  ansible.builtin.set_fact:
    il_group: "{{ mac | map('extract', il_groups) | list }}"
    il_name: "{{ mac | map('extract', il_names) | list }}"

- name: Transform into dictionaries format
  ansible.builtin.set_fact:
    # transform the singular groups into dictionary objects
    il_group_dict: "{{ dict(mac | zip(il_group)) }}"
    # also for the name list
    il_name_dict: "{{ dict(mac | zip(il_name)) }}"

- name: Transform into Ansible list format
  ansible.builtin.set_fact:
    # now transform the dicts into ansible lists:
    il_group_list: "{{ il_group_dict | dict2items(key_name='group', value_name='group') }}"
    il_name_list: "{{ il_name_dict | dict2items(key_name='ansible_host', value_name='name') }}"

- name: Create the final result
  ansible.builtin.set_fact:
    # merge the two in order to create the final result
    result_final: "{{ [livelist_known, il_group_list, il_name_list] | community.general.lists_mergeby('mac') }}"
    # result_final: "{{ livelist_known | zip(il_group_list) | zip(il_name_list) | map('flatten') | map('combine') | list }}"

- name: Debug final
  ansible.builtin.debug:
    msg: "{{ result_final }}"
